#!/usr/bin/env python

import sys, os

count = 0

def check_param(argv) :
    if len(argv) != 2 :
        print("You wrote %d argument(s), please write a single file name."%(len(argv)-1))
        sys.exit(1)
    if argv[1] == "-h" :
        print("USAGE\n\t   ./301dannon file\n\nDESCRIPTION\n\tfile\tfile that contains the numbers to be sorted, separated by spaces")
        sys.exit(0)
    if not os.path.isfile(argv[1]) :
        print("%s is not a file or doesn't exist."%argv[1])
        sys.exit(1)
    return (0)

def is_sort(words) :
    for i in range(0, len(words) - 1) :
        if words[i] >= words[i + 1] :
            return 0
    return 1

def counting_elem(words) :
    if len(words) == 1 :
        print("%d element"%len(words))
    else :
        print("%d elements"%len(words))

def select_sort(words) :
    nbr = len(words) * (len(words) - 1) / 2
    print("select sort :  %d comparisons"%nbr)

def insertion_sort(words) :
    liste = [words[0]]
    p = 1
    nbr = 0
    for k in range(1, len(words)) :
        j = 0
        while j < p and words[k] >= liste[j] :
            j = j + 1
        if j < p :
            nbr = nbr + j + 1
        else :
            nbr = nbr + j
        liste.insert(j, words[k])
        p = p + 1
    print("insertion sort :  %d comparisons"%nbr)

def bubble_sort(words) :
    nbr = len(words) * (len(words) - 1) / 2
    print("bubble sort :  %d comparisons"%nbr)

def fusion(tmp1, tmp2) :
    global count
    if tmp1 == [] :
        return tmp2
    if tmp2 == [] :
        return tmp1
    if tmp1[0] < tmp2[0] :
        count += 1
        return [tmp1[0]] + fusion(tmp1[1 :], tmp2)
    else :
        count += 1
        return [tmp2[0]] + fusion(tmp1, tmp2[1 :])

def fusion_sort(words) :
    global count
    nbr = 0
    if len(words) <= 1 :
        return (words)
    tmp1 = [words[i] for i in range(len(words) // 2)]
    tmp2 = [words[i] for i in range(len(words) // 2, len(words))]
    return fusion(fusion_sort(tmp1), fusion_sort(tmp2))

def quicksort(words) :
    nbr = 0
    pivot = 0
    left = []
    right = []

    if len(words) < 2 :
        return 0
    for i in range(0, len(words)) :
        if i != pivot :
            nbr += 1
            if words[i] < words[pivot] :
                left.append(words[i])
            if words[i] >= words[pivot] :
                right.append(words[i])

    nbr += quicksort(left)
    nbr += quicksort(right)
    return nbr

def main() :
    check_param(sys.argv)
    with open(sys.argv[1]) as f :
        words = f.read().split()
    try :
        words = list(map(float, words))
    except ValueError :
        print("Error: please enter number")
        sys.exit(1)
    if len(words) < 1 or is_sort(words) :
        print("%d elements"%len(words))
        print("select sort :  0 comparisons")
        print("insertion sort :  0 comparisons")
        print("bubble sort :  0 comparisons")
        print("fusion sort :  0 comparisons")
        print("quicksort :  0 comparisons")
        sys.exit(0)
    counting_elem(words)
    select_sort(words)
    insertion_sort(words)
    sys.setrecursionlimit(10000)
    bubble_sort(words)
    fusion_sort(words)
    print("fusion sort :  %d comparisons"%count)
    print("quicksort :  %d comparisons"%quicksort(words))

if __name__ == "__main__" :
    main()
